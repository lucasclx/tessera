spring.application.name=tessera

# Server Port
server.port=8080

# MySQL Database 
spring.datasource.url=jdbc:mysql://localhost:3306/tessera_db?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver

# JPA / Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# JWT Properties
jwt.secret=e8bbc656b6d4bca2b7e9f292d18082a0af114bdf2b0f8e98f9aefffad9f7e60832eb3f0859195dd40f3c51e1611c8790
jwt.expiration=86400000

# Server compression
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain

# Pretty JSON responses
spring.jackson.serialization.indent-output=true

# Frontend URL (para links em e-mails)
app.frontend.url=http://localhost:4200 

# Email Configuration
spring.mail.host=localhost
# Porta padrão para MailHog, ajuste se necessário.
spring.mail.port=1025 
# Se seu SMTP local não requer autenticação ou TLS:
spring.mail.properties.mail.smtp.auth=false
spring.mail.properties.mail.smtp.starttls.enable=false
# Se precisar de autenticação para um SMTP real (ex: Gmail, SendGrid):
# spring.mail.username=your-email@example.com
# spring.mail.password=your-email-password
# spring.mail.properties.mail.smtp.auth=true
# spring.mail.properties.mail.smtp.starttls.enable=true

# From address for emails sent by the application
mail.from.address=noreply@tessera.com